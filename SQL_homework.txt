Домашнее задание №1 - Выбор и фильтрация данных, запрос SELECT

    1. Написать запрос для выбора студентов в порядке их регистрации.

### SELECT name, registration_date FROM skillbox.students order by registration_date asc limit 10; ###

    2. Написать запрос для выбора 5 самых дорогих курсов, на которых более 4 студентов, и которые длятся более 10 часов.

### SELECT price, students_count, duration FROM skillbox.courses where students_count > 4 and duration > 10 order by price desc limit 5; ###

    3. Написать один (!) запрос, который выведет одновременно список из имен трёх самых молодых студентов, имен трёх самых старых учителей и названий трёх самых продолжительных курсов.

### (SELECT name, age FROM skillbox.students order by age desc limit 3)
union
(SELECT name, age FROM skillbox.teachers order by age asc limit 3)
union
(SELECT name, duration as courses_duration FROM skillbox.courses order by duration asc limit 3);###

Домашнее задание №2 - Функции и выражения, агрегация данных

    1. Написать запрос для выбора среднего возраста всех учителей с зарплатой более 10 000.

### SELECT  avg(age) as avg_age FROM skillbox.teachers where salary >10000;###

    2. Написать запрос для расчета суммы, сколько будет стоить купить все курсы по дизайну.

### SELECT sum(price) as Over_price FROM skillbox.courses where type ="DESIGN"; ###

    3. Написать запрос для расчёта, сколько минут (!) длятся все курсы по программированию.

### SELECT sum(duration)*60 as total_time_duration FROM skillbox.courses where type ="PROGRAMMING";### 

Домашнее задание №3 - Группировка, соединение таблиц (JOIN)

    1. Напишите запрос, который выводит сумму, сколько часов должен в итоге проучиться каждый студент (сумма длительности всех курсов на которые он подписан).

    В результате запрос возвращает две колонки: Имя Студента — Количество часов.

### SELECT Students.name as name, SUM(duration) as count_hours FROM Courses
    -> JOIN Subscriptions ON Courses.id = Subscriptions.course_id
    -> JOIN Students ON Students.id =  Subscriptions.student_id
    -> GROUP BY Students.id ORDER BY count_hours DESC;###

    2. Напишите запрос, который посчитает для каждого учителя средний возраст его учеников.

    В результате запрос возвращает две колонки: Имя Учителя — Средний Возраст Учеников.

### SELECT Teachers.name AS name, AVG(Students.age) AS average_age_students FROM Students
    -> JOIN Subscriptions ON Students.id = Subscriptions.student_id
    -> JOIN Courses ON Subscriptions.course_id = Courses.id
    -> JOIN Teachers ON Courses.teacher_id = Teachers.id
    -> GROUP BY Teachers.id ORDER BY average_age_students;###

    3. Напишите запрос, который выводит среднюю зарплату учителей для каждого типа курса (Дизайн/Программирование/Маркетинг и т.д.).

    В результате запрос возвращает две колонки: Тип Курса — Средняя зарплата.

### SELECT Courses.type AS course_type, AVG(Teachers.salary) AS aver_salary FROM Teachers
    -> JOIN Courses ON Teachers.id = Courses.teacher_id
    -> GROUP BY Courses.type ORDER BY aver_salary DESC;###

